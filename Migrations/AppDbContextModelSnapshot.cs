// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TylorShop.Models;

#nullable disable

namespace TylorShop.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TylorShop.Models.Accounting", b =>
                {
                    b.Property<int>("Oid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Oid"));

                    b.Property<int?>("AccountingType")
                        .HasColumnType("int");

                    b.Property<double?>("Amount")
                        .HasColumnType("float");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Gcrecord")
                        .HasColumnType("int")
                        .HasColumnName("GCRecord");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("OptimisticLockField")
                        .HasColumnType("int");

                    b.Property<Guid?>("Owner")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Oid");

                    b.HasIndex(new[] { "CreatedBy" }, "iCreatedBy_Accounting");

                    b.HasIndex(new[] { "Gcrecord" }, "iGCRecord_Accounting");

                    b.HasIndex(new[] { "Owner" }, "iOwner_Accounting");

                    b.HasIndex(new[] { "UpdatedBy" }, "iUpdatedBy_Accounting");

                    b.ToTable("Accounting", (string)null);
                });

            modelBuilder.Entity("TylorShop.Models.CustomSetup", b =>
                {
                    b.Property<int>("Oid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Oid"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Gcrecord")
                        .HasColumnType("int")
                        .HasColumnName("GCRecord");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("OptimisticLockField")
                        .HasColumnType("int");

                    b.Property<Guid?>("Owner")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Setup")
                        .HasColumnType("int");

                    b.Property<bool?>("ShowPrintPreview")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Oid");

                    b.HasIndex(new[] { "CreatedBy" }, "iCreatedBy_CustomSetup");

                    b.HasIndex(new[] { "Gcrecord" }, "iGCRecord_CustomSetup");

                    b.HasIndex(new[] { "Owner" }, "iOwner_CustomSetup");

                    b.HasIndex(new[] { "UpdatedBy" }, "iUpdatedBy_CustomSetup");

                    b.ToTable("CustomSetup", (string)null);
                });

            modelBuilder.Entity("TylorShop.Models.CustomerInfo", b =>
                {
                    b.Property<int>("Oid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Oid"));

                    b.Property<string>("Address")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Age")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Body")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("Gcrecord")
                        .HasColumnType("int")
                        .HasColumnName("GCRecord");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Gola")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Hat")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Lomba")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LuzHata")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("OptimisticLockField")
                        .HasColumnType("int");

                    b.Property<Guid?>("Owner")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Pet")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Put")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Oid");

                    b.HasIndex(new[] { "CreatedBy" }, "iCreatedBy_CustomerInfo");

                    b.HasIndex(new[] { "Gcrecord" }, "iGCRecord_CustomerInfo");

                    b.HasIndex(new[] { "Owner" }, "iOwner_CustomerInfo");

                    b.HasIndex(new[] { "UpdatedBy" }, "iUpdatedBy_CustomerInfo");

                    b.ToTable("CustomerInfo", (string)null);
                });

            modelBuilder.Entity("TylorShop.Models.DashboardDatum", b =>
                {
                    b.Property<Guid>("Oid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Gcrecord")
                        .HasColumnType("int")
                        .HasColumnName("GCRecord");

                    b.Property<int?>("OptimisticLockField")
                        .HasColumnType("int");

                    b.Property<bool?>("SynchronizeTitle")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Oid");

                    b.HasIndex(new[] { "Gcrecord" }, "iGCRecord_DashboardData");

                    b.ToTable("DashboardData");
                });

            modelBuilder.Entity("TylorShop.Models.Denial", b =>
                {
                    b.Property<int>("Oid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Oid"));

                    b.Property<string>("ClientName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ExpireDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("Gcrecord")
                        .HasColumnType("int")
                        .HasColumnName("GCRecord");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("OptimisticLockField")
                        .HasColumnType("int");

                    b.Property<Guid?>("Owner")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Oid");

                    b.HasIndex(new[] { "CreatedBy" }, "iCreatedBy_Denial");

                    b.HasIndex(new[] { "Gcrecord" }, "iGCRecord_Denial");

                    b.HasIndex(new[] { "Owner" }, "iOwner_Denial");

                    b.HasIndex(new[] { "UpdatedBy" }, "iUpdatedBy_Denial");

                    b.ToTable("Denial", (string)null);
                });

            modelBuilder.Entity("TylorShop.Models.EmployeeMaster", b =>
                {
                    b.Property<Guid>("Oid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContactAddress")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ContactNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("HireDate")
                        .HasColumnType("datetime");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PermanentAddress")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Oid");

                    b.ToTable("EmployeeMaster", (string)null);
                });

            modelBuilder.Entity("TylorShop.Models.FileDatum", b =>
                {
                    b.Property<Guid>("Oid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Content")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("FileName")
                        .HasMaxLength(260)
                        .HasColumnType("nvarchar(260)");

                    b.Property<int?>("Gcrecord")
                        .HasColumnType("int")
                        .HasColumnName("GCRecord");

                    b.Property<int?>("OptimisticLockField")
                        .HasColumnType("int");

                    b.Property<int?>("Size")
                        .HasColumnType("int")
                        .HasColumnName("size");

                    b.HasKey("Oid");

                    b.HasIndex(new[] { "Gcrecord" }, "iGCRecord_FileData");

                    b.ToTable("FileData");
                });

            modelBuilder.Entity("TylorShop.Models.ModelDifference", b =>
                {
                    b.Property<Guid>("Oid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContextId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("Gcrecord")
                        .HasColumnType("int")
                        .HasColumnName("GCRecord");

                    b.Property<int?>("OptimisticLockField")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("Version")
                        .HasColumnType("int");

                    b.HasKey("Oid");

                    b.HasIndex(new[] { "Gcrecord" }, "iGCRecord_ModelDifference");

                    b.ToTable("ModelDifference", (string)null);
                });

            modelBuilder.Entity("TylorShop.Models.ModelDifferenceAspect", b =>
                {
                    b.Property<Guid>("Oid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Gcrecord")
                        .HasColumnType("int")
                        .HasColumnName("GCRecord");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("OptimisticLockField")
                        .HasColumnType("int");

                    b.Property<Guid?>("Owner")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Xml")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Oid");

                    b.HasIndex(new[] { "Gcrecord" }, "iGCRecord_ModelDifferenceAspect");

                    b.HasIndex(new[] { "Owner" }, "iOwner_ModelDifferenceAspect");

                    b.ToTable("ModelDifferenceAspect", (string)null);
                });

            modelBuilder.Entity("TylorShop.Models.OrderTaking", b =>
                {
                    b.Property<int>("Oid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Oid"));

                    b.Property<string>("Aligori")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double?>("Amount")
                        .HasColumnType("float");

                    b.Property<string>("Body")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("Borka")
                        .HasColumnType("int");

                    b.Property<string>("CikonRabar")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("Cosh")
                        .HasColumnType("int");

                    b.Property<string>("CouraRabar")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Curidar")
                        .HasColumnType("int");

                    b.Property<int>("Customer")
                        .HasColumnType("int");

                    b.Property<DateTime>("DelevaryDate")
                        .HasColumnType("datetime");

                    b.Property<double?>("Discount")
                        .HasColumnType("float");

                    b.Property<string>("Discription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DiscriptionKamiz")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DiscriptionPant")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EkCharaJubba")
                        .HasColumnType("int");

                    b.Property<int?>("EkChata")
                        .HasColumnType("int");

                    b.Property<int?>("Fotua")
                        .HasColumnType("int");

                    b.Property<int?>("Gcrecord")
                        .HasColumnType("int")
                        .HasColumnName("GCRecord");

                    b.Property<string>("Gola")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Hat")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Hata")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsCancelled")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDelevered")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsReady")
                        .HasColumnType("bit");

                    b.Property<int?>("JubbaKalidar")
                        .HasColumnType("int");

                    b.Property<int?>("Kabli")
                        .HasColumnType("int");

                    b.Property<int?>("Kalider")
                        .HasColumnType("int");

                    b.Property<string>("Kolar")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("Koti")
                        .HasColumnType("int");

                    b.Property<string>("Lomba")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LuzHata")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("MobilePocket")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("Naro")
                        .HasColumnType("int");

                    b.Property<string>("Nic")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NicThekeFara")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NocShohoFara")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("OptimisticLockField")
                        .HasColumnType("int");

                    b.Property<DateTime?>("OrderDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("Owner")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Paipen")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("Pant")
                        .HasColumnType("int");

                    b.Property<string>("PantPocket")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Pet")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Plet")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Pocket")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PocketThekeBondo")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Put")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("Selwar")
                        .HasColumnType("int");

                    b.Property<int?>("Serwani")
                        .HasColumnType("int");

                    b.Property<int?>("Shart")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Oid");

                    b.HasIndex(new[] { "CreatedBy" }, "iCreatedBy_OrderTaking");

                    b.HasIndex(new[] { "Customer" }, "iCustomer_OrderTaking");

                    b.HasIndex(new[] { "Gcrecord" }, "iGCRecord_OrderTaking");

                    b.HasIndex(new[] { "Owner" }, "iOwner_OrderTaking");

                    b.HasIndex(new[] { "UpdatedBy" }, "iUpdatedBy_OrderTaking");

                    b.ToTable("OrderTaking", (string)null);
                });

            modelBuilder.Entity("TylorShop.Models.OrderTransaction", b =>
                {
                    b.Property<int>("Oid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Oid"));

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Gcrecord")
                        .HasColumnType("int")
                        .HasColumnName("GCRecord");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("OptimisticLockField")
                        .HasColumnType("int");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<Guid?>("Owner")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("TransactionType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Oid");

                    b.HasIndex(new[] { "CreatedBy" }, "iCreatedBy_OrderTransactions");

                    b.HasIndex(new[] { "Gcrecord" }, "iGCRecord_OrderTransactions");

                    b.HasIndex(new[] { "Order" }, "iOrder_OrderTransactions");

                    b.HasIndex(new[] { "Owner" }, "iOwner_OrderTransactions");

                    b.HasIndex(new[] { "UpdatedBy" }, "iUpdatedBy_OrderTransactions");

                    b.ToTable("OrderTransactions");
                });

            modelBuilder.Entity("TylorShop.Models.PermissionPolicyMemberPermissionsObject", b =>
                {
                    b.Property<Guid>("Oid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Criteria")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Gcrecord")
                        .HasColumnType("int")
                        .HasColumnName("GCRecord");

                    b.Property<string>("Members")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OptimisticLockField")
                        .HasColumnType("int");

                    b.Property<int?>("ReadState")
                        .HasColumnType("int");

                    b.Property<Guid?>("TypePermissionObject")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("WriteState")
                        .HasColumnType("int");

                    b.HasKey("Oid");

                    b.HasIndex(new[] { "Gcrecord" }, "iGCRecord_PermissionPolicyMemberPermissionsObject");

                    b.HasIndex(new[] { "TypePermissionObject" }, "iTypePermissionObject_PermissionPolicyMemberPermissionsObject");

                    b.ToTable("PermissionPolicyMemberPermissionsObject", (string)null);
                });

            modelBuilder.Entity("TylorShop.Models.PermissionPolicyNavigationPermissionsObject", b =>
                {
                    b.Property<Guid>("Oid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Gcrecord")
                        .HasColumnType("int")
                        .HasColumnName("GCRecord");

                    b.Property<string>("ItemPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NavigateState")
                        .HasColumnType("int");

                    b.Property<int?>("OptimisticLockField")
                        .HasColumnType("int");

                    b.Property<Guid?>("Role")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Oid");

                    b.HasIndex(new[] { "Gcrecord" }, "iGCRecord_PermissionPolicyNavigationPermissionsObject");

                    b.HasIndex(new[] { "Role" }, "iRole_PermissionPolicyNavigationPermissionsObject");

                    b.ToTable("PermissionPolicyNavigationPermissionsObject", (string)null);
                });

            modelBuilder.Entity("TylorShop.Models.PermissionPolicyObjectPermissionsObject", b =>
                {
                    b.Property<Guid>("Oid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Criteria")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DeleteState")
                        .HasColumnType("int");

                    b.Property<int?>("Gcrecord")
                        .HasColumnType("int")
                        .HasColumnName("GCRecord");

                    b.Property<int?>("NavigateState")
                        .HasColumnType("int");

                    b.Property<int?>("OptimisticLockField")
                        .HasColumnType("int");

                    b.Property<int?>("ReadState")
                        .HasColumnType("int");

                    b.Property<Guid?>("TypePermissionObject")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("WriteState")
                        .HasColumnType("int");

                    b.HasKey("Oid");

                    b.HasIndex(new[] { "Gcrecord" }, "iGCRecord_PermissionPolicyObjectPermissionsObject");

                    b.HasIndex(new[] { "TypePermissionObject" }, "iTypePermissionObject_PermissionPolicyObjectPermissionsObject");

                    b.ToTable("PermissionPolicyObjectPermissionsObject", (string)null);
                });

            modelBuilder.Entity("TylorShop.Models.PermissionPolicyRole", b =>
                {
                    b.Property<Guid>("Oid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("CanEditModel")
                        .HasColumnType("bit");

                    b.Property<int?>("Gcrecord")
                        .HasColumnType("int")
                        .HasColumnName("GCRecord");

                    b.Property<bool?>("IsAdministrative")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("ObjectType")
                        .HasColumnType("int");

                    b.Property<int?>("OptimisticLockField")
                        .HasColumnType("int");

                    b.Property<int?>("PermissionPolicy")
                        .HasColumnType("int");

                    b.HasKey("Oid");

                    b.HasIndex(new[] { "Gcrecord" }, "iGCRecord_PermissionPolicyRole");

                    b.HasIndex(new[] { "ObjectType" }, "iObjectType_PermissionPolicyRole");

                    b.ToTable("PermissionPolicyRole", (string)null);
                });

            modelBuilder.Entity("TylorShop.Models.PermissionPolicyTypePermissionsObject", b =>
                {
                    b.Property<Guid>("Oid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("CreateState")
                        .HasColumnType("int");

                    b.Property<int?>("DeleteState")
                        .HasColumnType("int");

                    b.Property<int?>("Gcrecord")
                        .HasColumnType("int")
                        .HasColumnName("GCRecord");

                    b.Property<int?>("NavigateState")
                        .HasColumnType("int");

                    b.Property<int?>("OptimisticLockField")
                        .HasColumnType("int");

                    b.Property<int?>("ReadState")
                        .HasColumnType("int");

                    b.Property<Guid?>("Role")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TargetType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("WriteState")
                        .HasColumnType("int");

                    b.HasKey("Oid");

                    b.HasIndex(new[] { "Gcrecord" }, "iGCRecord_PermissionPolicyTypePermissionsObject");

                    b.HasIndex(new[] { "Role" }, "iRole_PermissionPolicyTypePermissionsObject");

                    b.ToTable("PermissionPolicyTypePermissionsObject", (string)null);
                });

            modelBuilder.Entity("TylorShop.Models.PermissionPolicyUser", b =>
                {
                    b.Property<Guid>("Oid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("ChangePasswordOnFirstLogon")
                        .HasColumnType("bit");

                    b.Property<int?>("Gcrecord")
                        .HasColumnType("int")
                        .HasColumnName("GCRecord");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("ObjectType")
                        .HasColumnType("int");

                    b.Property<int?>("OptimisticLockField")
                        .HasColumnType("int");

                    b.Property<string>("StoredPassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Oid");

                    b.HasIndex(new[] { "Gcrecord" }, "iGCRecord_PermissionPolicyUser");

                    b.HasIndex(new[] { "ObjectType" }, "iObjectType_PermissionPolicyUser");

                    b.ToTable("PermissionPolicyUser", (string)null);
                });

            modelBuilder.Entity("TylorShop.Models.PermissionPolicyUserUsersPermissionPolicyRoleRole", b =>
                {
                    b.Property<Guid>("Oid")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("OID");

                    b.Property<int?>("OptimisticLockField")
                        .HasColumnType("int");

                    b.Property<Guid?>("Roles")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("Users")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Oid");

                    b.HasIndex(new[] { "Roles", "Users" }, "iRolesUsers_PermissionPolicyUserUsers_PermissionPolicyRoleRoles")
                        .IsUnique()
                        .HasFilter("[Roles] IS NOT NULL AND [Users] IS NOT NULL");

                    b.HasIndex(new[] { "Roles" }, "iRoles_PermissionPolicyUserUsers_PermissionPolicyRoleRoles");

                    b.HasIndex(new[] { "Users" }, "iUsers_PermissionPolicyUserUsers_PermissionPolicyRoleRoles");

                    b.ToTable("PermissionPolicyUserUsers_PermissionPolicyRoleRoles", (string)null);
                });

            modelBuilder.Entity("TylorShop.Models.PrimativeDataCenter", b =>
                {
                    b.Property<int>("Oid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Oid"));

                    b.Property<DateTime?>("ActiovationDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DanialKstring")
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("DanialKString");

                    b.Property<string>("DanialString")
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.Property<int?>("Gcrecord")
                        .HasColumnType("int")
                        .HasColumnName("GCRecord");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("OptimisticLockField")
                        .HasColumnType("int");

                    b.Property<Guid?>("Owner")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Oid");

                    b.HasIndex(new[] { "CreatedBy" }, "iCreatedBy_PrimativeDataCenter");

                    b.HasIndex(new[] { "Gcrecord" }, "iGCRecord_PrimativeDataCenter");

                    b.HasIndex(new[] { "Owner" }, "iOwner_PrimativeDataCenter");

                    b.HasIndex(new[] { "UpdatedBy" }, "iUpdatedBy_PrimativeDataCenter");

                    b.ToTable("PrimativeDataCenter", (string)null);
                });

            modelBuilder.Entity("TylorShop.Models.ReportDataV2", b =>
                {
                    b.Property<Guid>("Oid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Content")
                        .HasColumnType("varbinary(max)");

                    b.Property<int?>("Gcrecord")
                        .HasColumnType("int")
                        .HasColumnName("GCRecord");

                    b.Property<bool?>("IsInplaceReport")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ObjectTypeName")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<int?>("OptimisticLockField")
                        .HasColumnType("int");

                    b.Property<string>("ParametersObjectTypeName")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("PredefinedReportType")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.HasKey("Oid");

                    b.HasIndex(new[] { "Gcrecord" }, "iGCRecord_ReportDataV2");

                    b.ToTable("ReportDataV2", (string)null);
                });

            modelBuilder.Entity("TylorShop.Models.XpobjectType", b =>
                {
                    b.Property<int>("Oid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Oid"));

                    b.Property<string>("AssemblyName")
                        .HasMaxLength(254)
                        .HasColumnType("nvarchar(254)");

                    b.Property<string>("TypeName")
                        .HasMaxLength(254)
                        .HasColumnType("nvarchar(254)");

                    b.HasKey("Oid");

                    b.HasIndex(new[] { "TypeName" }, "iTypeName_XPObjectType")
                        .IsUnique()
                        .HasFilter("[TypeName] IS NOT NULL");

                    b.ToTable("XPObjectType", (string)null);
                });

            modelBuilder.Entity("TylorShop.Models.Accounting", b =>
                {
                    b.HasOne("TylorShop.Models.EmployeeMaster", "CreatedByNavigation")
                        .WithMany("AccountingCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_Accounting_CreatedBy");

                    b.HasOne("TylorShop.Models.EmployeeMaster", "OwnerNavigation")
                        .WithMany("AccountingOwnerNavigations")
                        .HasForeignKey("Owner")
                        .HasConstraintName("FK_Accounting_Owner");

                    b.HasOne("TylorShop.Models.EmployeeMaster", "UpdatedByNavigation")
                        .WithMany("AccountingUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("FK_Accounting_UpdatedBy");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("OwnerNavigation");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("TylorShop.Models.CustomSetup", b =>
                {
                    b.HasOne("TylorShop.Models.EmployeeMaster", "CreatedByNavigation")
                        .WithMany("CustomSetupCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_CustomSetup_CreatedBy");

                    b.HasOne("TylorShop.Models.EmployeeMaster", "OwnerNavigation")
                        .WithMany("CustomSetupOwnerNavigations")
                        .HasForeignKey("Owner")
                        .HasConstraintName("FK_CustomSetup_Owner");

                    b.HasOne("TylorShop.Models.EmployeeMaster", "UpdatedByNavigation")
                        .WithMany("CustomSetupUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("FK_CustomSetup_UpdatedBy");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("OwnerNavigation");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("TylorShop.Models.CustomerInfo", b =>
                {
                    b.HasOne("TylorShop.Models.EmployeeMaster", "CreatedByNavigation")
                        .WithMany("CustomerInfoCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_CustomerInfo_CreatedBy");

                    b.HasOne("TylorShop.Models.EmployeeMaster", "OwnerNavigation")
                        .WithMany("CustomerInfoOwnerNavigations")
                        .HasForeignKey("Owner")
                        .HasConstraintName("FK_CustomerInfo_Owner");

                    b.HasOne("TylorShop.Models.EmployeeMaster", "UpdatedByNavigation")
                        .WithMany("CustomerInfoUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("FK_CustomerInfo_UpdatedBy");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("OwnerNavigation");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("TylorShop.Models.Denial", b =>
                {
                    b.HasOne("TylorShop.Models.EmployeeMaster", "CreatedByNavigation")
                        .WithMany("DenialCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_Denial_CreatedBy");

                    b.HasOne("TylorShop.Models.EmployeeMaster", "OwnerNavigation")
                        .WithMany("DenialOwnerNavigations")
                        .HasForeignKey("Owner")
                        .HasConstraintName("FK_Denial_Owner");

                    b.HasOne("TylorShop.Models.EmployeeMaster", "UpdatedByNavigation")
                        .WithMany("DenialUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("FK_Denial_UpdatedBy");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("OwnerNavigation");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("TylorShop.Models.EmployeeMaster", b =>
                {
                    b.HasOne("TylorShop.Models.PermissionPolicyUser", "OidNavigation")
                        .WithOne("EmployeeMaster")
                        .HasForeignKey("TylorShop.Models.EmployeeMaster", "Oid")
                        .IsRequired()
                        .HasConstraintName("FK_EmployeeMaster_Oid");

                    b.Navigation("OidNavigation");
                });

            modelBuilder.Entity("TylorShop.Models.ModelDifferenceAspect", b =>
                {
                    b.HasOne("TylorShop.Models.ModelDifference", "OwnerNavigation")
                        .WithMany("ModelDifferenceAspects")
                        .HasForeignKey("Owner")
                        .HasConstraintName("FK_ModelDifferenceAspect_Owner");

                    b.Navigation("OwnerNavigation");
                });

            modelBuilder.Entity("TylorShop.Models.OrderTaking", b =>
                {
                    b.HasOne("TylorShop.Models.EmployeeMaster", "CreatedByNavigation")
                        .WithMany("OrderTakingCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_OrderTaking_CreatedBy");

                    b.HasOne("TylorShop.Models.CustomerInfo", "CustomerNavigation")
                        .WithMany("OrderTakings")
                        .HasForeignKey("Customer")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_OrderTaking_Customer");

                    b.HasOne("TylorShop.Models.EmployeeMaster", "OwnerNavigation")
                        .WithMany("OrderTakingOwnerNavigations")
                        .HasForeignKey("Owner")
                        .HasConstraintName("FK_OrderTaking_Owner");

                    b.HasOne("TylorShop.Models.EmployeeMaster", "UpdatedByNavigation")
                        .WithMany("OrderTakingUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("FK_OrderTaking_UpdatedBy");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("CustomerNavigation");

                    b.Navigation("OwnerNavigation");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("TylorShop.Models.OrderTransaction", b =>
                {
                    b.HasOne("TylorShop.Models.EmployeeMaster", "CreatedByNavigation")
                        .WithMany("OrderTransactionCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_OrderTransactions_CreatedBy");

                    b.HasOne("TylorShop.Models.OrderTaking", "OrderNavigation")
                        .WithMany("OrderTransactions")
                        .HasForeignKey("Order")
                        .HasConstraintName("FK_OrderTransactions_Order");

                    b.HasOne("TylorShop.Models.EmployeeMaster", "OwnerNavigation")
                        .WithMany("OrderTransactionOwnerNavigations")
                        .HasForeignKey("Owner")
                        .HasConstraintName("FK_OrderTransactions_Owner");

                    b.HasOne("TylorShop.Models.EmployeeMaster", "UpdatedByNavigation")
                        .WithMany("OrderTransactionUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("FK_OrderTransactions_UpdatedBy");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("OrderNavigation");

                    b.Navigation("OwnerNavigation");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("TylorShop.Models.PermissionPolicyMemberPermissionsObject", b =>
                {
                    b.HasOne("TylorShop.Models.PermissionPolicyTypePermissionsObject", "TypePermissionObjectNavigation")
                        .WithMany("PermissionPolicyMemberPermissionsObjects")
                        .HasForeignKey("TypePermissionObject")
                        .HasConstraintName("FK_PermissionPolicyMemberPermissionsObject_TypePermissionObject");

                    b.Navigation("TypePermissionObjectNavigation");
                });

            modelBuilder.Entity("TylorShop.Models.PermissionPolicyNavigationPermissionsObject", b =>
                {
                    b.HasOne("TylorShop.Models.PermissionPolicyRole", "RoleNavigation")
                        .WithMany("PermissionPolicyNavigationPermissionsObjects")
                        .HasForeignKey("Role")
                        .HasConstraintName("FK_PermissionPolicyNavigationPermissionsObject_Role");

                    b.Navigation("RoleNavigation");
                });

            modelBuilder.Entity("TylorShop.Models.PermissionPolicyObjectPermissionsObject", b =>
                {
                    b.HasOne("TylorShop.Models.PermissionPolicyTypePermissionsObject", "TypePermissionObjectNavigation")
                        .WithMany("PermissionPolicyObjectPermissionsObjects")
                        .HasForeignKey("TypePermissionObject")
                        .HasConstraintName("FK_PermissionPolicyObjectPermissionsObject_TypePermissionObject");

                    b.Navigation("TypePermissionObjectNavigation");
                });

            modelBuilder.Entity("TylorShop.Models.PermissionPolicyRole", b =>
                {
                    b.HasOne("TylorShop.Models.XpobjectType", "ObjectTypeNavigation")
                        .WithMany("PermissionPolicyRoles")
                        .HasForeignKey("ObjectType")
                        .HasConstraintName("FK_PermissionPolicyRole_ObjectType");

                    b.Navigation("ObjectTypeNavigation");
                });

            modelBuilder.Entity("TylorShop.Models.PermissionPolicyTypePermissionsObject", b =>
                {
                    b.HasOne("TylorShop.Models.PermissionPolicyRole", "RoleNavigation")
                        .WithMany("PermissionPolicyTypePermissionsObjects")
                        .HasForeignKey("Role")
                        .HasConstraintName("FK_PermissionPolicyTypePermissionsObject_Role");

                    b.Navigation("RoleNavigation");
                });

            modelBuilder.Entity("TylorShop.Models.PermissionPolicyUser", b =>
                {
                    b.HasOne("TylorShop.Models.XpobjectType", "ObjectTypeNavigation")
                        .WithMany("PermissionPolicyUsers")
                        .HasForeignKey("ObjectType")
                        .HasConstraintName("FK_PermissionPolicyUser_ObjectType");

                    b.Navigation("ObjectTypeNavigation");
                });

            modelBuilder.Entity("TylorShop.Models.PermissionPolicyUserUsersPermissionPolicyRoleRole", b =>
                {
                    b.HasOne("TylorShop.Models.PermissionPolicyRole", "RolesNavigation")
                        .WithMany("PermissionPolicyUserUsersPermissionPolicyRoleRoles")
                        .HasForeignKey("Roles")
                        .HasConstraintName("FK_PermissionPolicyUserUsers_PermissionPolicyRoleRoles_Roles");

                    b.HasOne("TylorShop.Models.PermissionPolicyUser", "UsersNavigation")
                        .WithMany("PermissionPolicyUserUsersPermissionPolicyRoleRoles")
                        .HasForeignKey("Users")
                        .HasConstraintName("FK_PermissionPolicyUserUsers_PermissionPolicyRoleRoles_Users");

                    b.Navigation("RolesNavigation");

                    b.Navigation("UsersNavigation");
                });

            modelBuilder.Entity("TylorShop.Models.PrimativeDataCenter", b =>
                {
                    b.HasOne("TylorShop.Models.EmployeeMaster", "CreatedByNavigation")
                        .WithMany("PrimativeDataCenterCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_PrimativeDataCenter_CreatedBy");

                    b.HasOne("TylorShop.Models.EmployeeMaster", "OwnerNavigation")
                        .WithMany("PrimativeDataCenterOwnerNavigations")
                        .HasForeignKey("Owner")
                        .HasConstraintName("FK_PrimativeDataCenter_Owner");

                    b.HasOne("TylorShop.Models.EmployeeMaster", "UpdatedByNavigation")
                        .WithMany("PrimativeDataCenterUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("FK_PrimativeDataCenter_UpdatedBy");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("OwnerNavigation");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("TylorShop.Models.CustomerInfo", b =>
                {
                    b.Navigation("OrderTakings");
                });

            modelBuilder.Entity("TylorShop.Models.EmployeeMaster", b =>
                {
                    b.Navigation("AccountingCreatedByNavigations");

                    b.Navigation("AccountingOwnerNavigations");

                    b.Navigation("AccountingUpdatedByNavigations");

                    b.Navigation("CustomSetupCreatedByNavigations");

                    b.Navigation("CustomSetupOwnerNavigations");

                    b.Navigation("CustomSetupUpdatedByNavigations");

                    b.Navigation("CustomerInfoCreatedByNavigations");

                    b.Navigation("CustomerInfoOwnerNavigations");

                    b.Navigation("CustomerInfoUpdatedByNavigations");

                    b.Navigation("DenialCreatedByNavigations");

                    b.Navigation("DenialOwnerNavigations");

                    b.Navigation("DenialUpdatedByNavigations");

                    b.Navigation("OrderTakingCreatedByNavigations");

                    b.Navigation("OrderTakingOwnerNavigations");

                    b.Navigation("OrderTakingUpdatedByNavigations");

                    b.Navigation("OrderTransactionCreatedByNavigations");

                    b.Navigation("OrderTransactionOwnerNavigations");

                    b.Navigation("OrderTransactionUpdatedByNavigations");

                    b.Navigation("PrimativeDataCenterCreatedByNavigations");

                    b.Navigation("PrimativeDataCenterOwnerNavigations");

                    b.Navigation("PrimativeDataCenterUpdatedByNavigations");
                });

            modelBuilder.Entity("TylorShop.Models.ModelDifference", b =>
                {
                    b.Navigation("ModelDifferenceAspects");
                });

            modelBuilder.Entity("TylorShop.Models.OrderTaking", b =>
                {
                    b.Navigation("OrderTransactions");
                });

            modelBuilder.Entity("TylorShop.Models.PermissionPolicyRole", b =>
                {
                    b.Navigation("PermissionPolicyNavigationPermissionsObjects");

                    b.Navigation("PermissionPolicyTypePermissionsObjects");

                    b.Navigation("PermissionPolicyUserUsersPermissionPolicyRoleRoles");
                });

            modelBuilder.Entity("TylorShop.Models.PermissionPolicyTypePermissionsObject", b =>
                {
                    b.Navigation("PermissionPolicyMemberPermissionsObjects");

                    b.Navigation("PermissionPolicyObjectPermissionsObjects");
                });

            modelBuilder.Entity("TylorShop.Models.PermissionPolicyUser", b =>
                {
                    b.Navigation("EmployeeMaster");

                    b.Navigation("PermissionPolicyUserUsersPermissionPolicyRoleRoles");
                });

            modelBuilder.Entity("TylorShop.Models.XpobjectType", b =>
                {
                    b.Navigation("PermissionPolicyRoles");

                    b.Navigation("PermissionPolicyUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
